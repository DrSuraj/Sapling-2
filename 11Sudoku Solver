import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    char[][] board = new char[9][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        board[i][j] = sc.next().charAt(0);
      }
    }
    sc.close();
    solveSudoku(board);
    if (isValidSudoku(board)) System.out.println(
      "correct"
    ); else System.out.println("incorrect");
  }

  static char[] arr = new char[] {
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
  };

  public static void solveSudoku(char[][] board) {
    if (backtrack(board)) return;
  }

  public static boolean backtrack(char[][] board) {
    boolean isEmpty = true;
    int row = -1, col = -1;
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        if (board[i][j] == '.') {
          row = i;
          col = j;
          isEmpty = false;
          break;
        }
      }
      if (!isEmpty) break;
    }
    if (isEmpty) return true;
    for (int num = 1; num <= 9; num++) {
      if (isSafe(board, row, col, arr[num - 1])) {
        board[row][col] = arr[num - 1];
        if (backtrack(board)) return true;
        board[row][col] = '.';
      }
    }
    return false;
  }

  public static boolean isSafe(char[][] grid, int i, int j, char num) {
    for (int k = 0; k < 9; k++) {
      if (grid[i][k] == num) return false;
    }
    for (int k = 0; k < 9; k++) {
      if (grid[k][j] == num) return false;
    }
    int sqrt = (int) Math.sqrt(grid.length);
    int boxRowStart = i - i % sqrt;
    int boxColStart = j - j % sqrt;

    for (int r = boxRowStart; r < boxRowStart + sqrt; r++) {
      for (int d = boxColStart; d < boxColStart + sqrt; d++) {
        if (grid[r][d] == num) {
          return false;
        }
      }
    }

    // if there is no clash, it's safe.
    return true;
  }

  public static boolean isValidSudoku(char[][] board) {
    for (int i = 0; i < 9; i++) {
      HashSet<Character> rows = new HashSet<Character>();
      HashSet<Character> columns = new HashSet<Character>();
      HashSet<Character> cube = new HashSet<Character>();
      for (int j = 0; j < 9; j++) {
        if (board[i][j] != '.' && !rows.add(board[i][j])) return false;
        if (board[j][i] != '.' && !columns.add(board[j][i])) return false;
        int RowIndex = 3 * (i / 3);
        int ColIndex = 3 * (i % 3);
        if (
          board[RowIndex + j / 3][ColIndex + j % 3] != '.' &&
          !cube.add(board[RowIndex + j / 3][ColIndex + j % 3])
        ) return false;
      }
    }
    return true;
  }
}
